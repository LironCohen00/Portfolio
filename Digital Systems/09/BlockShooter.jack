class BlockShooter {
    field Player player;
    field Bullet bullet;
    field Array squares;
    field int squaresLeft;

    constructor BlockShooter new() {
        let player = Player.new(0, 250);
        let squares = Array.new(6);
        let squares[0] = Square.new(79, 80, 50); 
        let squares[1] = Square.new(235, 80, 50);
        let squares[2] = Square.new(390, 80, 50);
        let squares[3] = Square.new(79, 10, 50);
        let squares[4] = Square.new(235, 10, 50);
        let squares[5] = Square.new(390, 10, 50);
        let squaresLeft = 6;
        return this;
    }

    method void dispose() {
      do player.dispose();
      do squares.dispose();
      do Memory.deAlloc(this);
      return;
    }

       /** Moves the square in the current direction. */
   method void movePlayer(boolean Left) {
      if (Left) { 
        do player.moveLeft(); 
      } else {
        do player.moveRight();
      }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   method void Shoot() {
    var boolean WillHit, break;
    var int i;
    var Square square;
    var int x;
    let bullet = Bullet.new(player.getXcoord() + 10, player.getYcoord() - 11);
    let WillHit = false;
    let i = -1;
    let break = false;
    while ((~break) & (i < squaresLeft)) {
        let i = i + 1;
        let square = squares[i];
        if ((bullet.getXcoord() < square.getXcoord() + 50) & (bullet.getXcoord() > square.getXcoord())) { //(bullet.getXcoord() < squares[i].getXcoord() + 50) & (bullet.getXcoord() > squares[i].getXcoord())
            let break = true;
            let WillHit = true;
        }
    }
    let break = false;
    while (~break) {
        let x = square.getYcoord() + 49;
        do bullet.moveUp();
        let x = bullet.getYcoord();
        if ((WillHit) & (bullet.getYcoord() = (square.getYcoord() + 49))){
            do square.erase();
            let squaresLeft = squaresLeft - 1;
            while (i < squaresLeft) { //move all the squares down the array, filling the now empty place in the array
                let squares[i] = squares[i+1];
                let i = i + 1;
            }
            let break = true;
        }
        if (bullet.getYcoord() < 2) {
            let break = true;
        }
    }

    do bullet.erase();
    return;
   }
      /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         let key = Keyboard.keyPressed();
         if (key = 81)  { let exit = true; }     // q key
         if (key = 130) { do movePlayer(true); }   // left arrow
         if (key = 132) { do movePlayer(false); }   // right arrow
         if (key = 32) { 
            do Shoot();
            // waits for the key to be released (only for shooting do we want this to happen)
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
         }
         }    
     } // while
     return;
   }
}